import { useRef, useState, useEffect } from "react";
import {
  Send,
  Download,
  Code,
  Sparkles,
  Zap,
  Eye,
  ArrowLeft,
  Menu,
  X,
} from "lucide-react";

async function generateCode(prompt) {
  try {
    const res = await fetch("https://codegenie-ntsg.onrender.com/chat", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        message: prompt,
      }),
    });
    const data = await res.json();
    console.log(data);
    return data;
  } catch (err) {
    console.log(err);
    return {
      html: `<div class='hero-section'>\n  <div class='container'>\n    <h1 class='title'>${prompt}</h1>\n    <p class='subtitle'>This is a beautiful landing page generated by AI with modern design principles.</p>\n    <button class='cta-button'>Get Started</button>\n  </div>\n</div>`,
      css: `.hero-section { 
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
    min-height: 100vh; 
    display: flex; 
    align-items: center; 
    justify-content: center; 
    color: white; 
    text-align: center; 
  } 
  .container { 
    max-width: 800px; 
    padding: 2rem; 
  } `,
    };
  }
}

export default function ChatPage() {
  const [messages, setMessages] = useState([
    {
      sender: "bot",
      text: "âœ¨ Welcome! I'm your AI design assistant. Describe the landing page you want to create and I'll generate beautiful code for you.",
    },
  ]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [generated, setGenerated] = useState(null);
  const [typing, setTyping] = useState(false);
  const [activeView, setActiveView] = useState("preview");
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const chatEndRef = useRef(null);

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMsg = { sender: "user", text: input };
    setMessages((msgs) => [...msgs, userMsg]);
    setInput("");
    setLoading(true);
    setTyping(true);

    // Add typing indicator
    setTimeout(() => {
      setMessages((msgs) => [
        ...msgs,
        { sender: "bot", text: "typing", isTyping: true },
      ]);
    }, 500);

    const code = await generateCode(input);
    setGenerated(code);

    // Remove typing indicator and add response
    setMessages((msgs) => {
      const filtered = msgs.filter((msg) => !msg.isTyping);
      return [
        ...filtered,
        {
          sender: "bot",
          text: "ðŸŽ¨ Perfect! I've generated your beautiful landing page. Check out the live preview and download the code when you're ready!",
        },
      ];
    });

    setLoading(false);
    setTyping(false);

    setTimeout(() => {
      chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  };

  const handleDownload = () => {
    if (!generated) return;
    const blob = new Blob(
      [
        `<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>Generated Landing Page</title>\n<style>\n${generated.css}\n</style>\n</head>\n<body>\n${generated.html}\n</body>\n</html>`,
      ],
      { type: "text/html" }
    );
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "beautiful-landing-page.html";
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleBackToHome = () => {
    // Navigate back to home page
    window.history.back();
  };

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex flex-col">
      {/* Back Arrow */}
      <div className="absolute z-20 p-4 lg:p-6">
        <button
          onClick={handleBackToHome}
          className="flex items-center gap-2 text-white hover:text-purple-300 transition-colors duration-300 group"
        >
          <div className="p-2 rounded-full bg-white/10 backdrop-blur border border-white/20 group-hover:bg-white/20 transition-all duration-300">
            <ArrowLeft className="w-5 h-5" />
          </div>
          <span className="hidden sm:inline font-medium">Back to Home</span>
        </button>
      </div>
      <div className="relative z-10 w-full max-w-7xl mx-auto mb-4 lg:mb-8 px-4 ">
        {" "}
        <div className="text-center py-4 lg:py-6">
          <div className="flex items-center justify-center gap-2 lg:gap-3 mb-3 lg:mb-4">
            <div className="p-2 lg:p-3 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-xl lg:rounded-2xl">
              <Sparkles className="w-6 h-6 lg:w-8 lg:h-8 text-white" />
            </div>
            <h1 className="text-2xl p-2 lg:text-4xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
              AI Landing Page Generator
            </h1>
          </div>
          <p className="text-gray-400 text-sm lg:text-lg">
            Create stunning landing pages with the power of AI
          </p>
        </div>
      </div>

      {/* Main Interface */}
      <div className="relative z-10 w-full max-w-7xl mx-auto flex-1 px-4 pb-4">
        {/* Desktop Layout */}
        <div className="hidden lg:block">
          <div className="bg-white/10 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 overflow-hidden min-h-[700px]">
            <div className="flex h-[700px]">
              {/* Left Panel - Chat */}
              <div className="flex flex-col w-1/2 border-r border-white/10">
                <div className="flex items-center gap-3 p-6 border-b border-white/10">
                  <div className="p-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl">
                    <Zap className="w-5 h-5 text-white" />
                  </div>
                  <h2 className="text-xl font-bold text-white">AI Assistant</h2>
                </div>

                <div className="flex-1 p-6 flex flex-col overflow-auto">
                  <div className="flex-1 overflow-y-auto mb-6 space-y-4">
                    {messages.map((msg, i) => (
                      <div
                        key={i}
                        className={`flex ${
                          msg.sender === "user"
                            ? "justify-end"
                            : "justify-start"
                        }`}
                      >
                        <div
                          className={`max-w-xs px-4 py-3 rounded-2xl shadow-lg transition-all duration-300 hover:scale-105 ${
                            msg.sender === "user"
                              ? "bg-gradient-to-r from-purple-500 to-pink-500 text-white ml-auto"
                              : msg.isTyping
                              ? "bg-white/10 backdrop-blur text-gray-300 animate-pulse"
                              : "bg-white/10 backdrop-blur text-gray-100 border border-white/20"
                          }`}
                        >
                          {msg.isTyping ? (
                            <div className="flex space-x-1">
                              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                              <div
                                className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                style={{ animationDelay: "0.1s" }}
                              ></div>
                              <div
                                className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                style={{ animationDelay: "0.2s" }}
                              ></div>
                            </div>
                          ) : (
                            msg.text
                          )}
                        </div>
                      </div>
                    ))}
                    <div ref={chatEndRef} />
                  </div>

                  {/* Input Section */}
                  <div className="flex gap-3">
                    <input
                      className="flex-1 bg-white/10 backdrop-blur border border-white/20 rounded-2xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300"
                      type="text"
                      placeholder="Describe your dream landing page..."
                      value={input}
                      onChange={(e) => setInput(e.target.value)}
                      onKeyDown={(e) => e.key === "Enter" && handleSend()}
                      disabled={loading}
                    />
                    <button
                      className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white p-3 rounded-2xl shadow-lg transition-all duration-300 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
                      onClick={handleSend}
                      disabled={loading || !input.trim()}
                    >
                      {loading ? (
                        <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      ) : (
                        <Send className="w-6 h-6" />
                      )}
                    </button>
                  </div>
                </div>
              </div>

              {/* Right Panel - Preview/Code */}
              <div className="w-1/2 flex flex-col bg-gradient-to-br from-white/5 to-white/10 backdrop-blur">
                <div className="flex items-center justify-between p-6 border-b border-white/10">
                  <div className="flex items-center gap-4">
                    <button
                      onClick={() => setActiveView("preview")}
                      className={`flex items-center gap-2 px-4 py-2 rounded-xl font-medium transition-all duration-300 ${
                        activeView === "preview"
                          ? "bg-gradient-to-r from-green-500 to-cyan-500 text-white shadow-lg"
                          : "bg-white/10 text-gray-300 hover:bg-white/20"
                      }`}
                    >
                      <Eye className="w-4 h-4" />
                      Preview
                    </button>
                    <button
                      onClick={() => setActiveView("code")}
                      className={`flex items-center gap-2 px-4 py-2 rounded-xl font-medium transition-all duration-300 ${
                        activeView === "code"
                          ? "bg-gradient-to-r from-cyan-500 to-purple-500 text-white shadow-lg"
                          : "bg-white/10 text-gray-300 hover:bg-white/20"
                      }`}
                    >
                      <Code className="w-4 h-4" />
                      Code
                    </button>
                  </div>

                  {generated && (
                    <button
                      onClick={handleDownload}
                      className="flex items-center gap-2 bg-white/10 hover:bg-white/20 backdrop-blur border border-white/20 text-white px-4 py-2 rounded-xl transition-all duration-300 hover:scale-105"
                    >
                      <Download className="w-4 h-4" />
                      Download
                    </button>
                  )}
                </div>

                <div className="flex-1 p-6">
                  {activeView === "preview" ? (
                    generated ? (
                      <div className="h-full bg-white rounded-2xl shadow-2xl border border-white/20 overflow-hidden">
                        <div className="flex items-center gap-2 bg-gray-100 px-4 py-3 border-b">
                          <div className="flex gap-2">
                            <div className="w-3 h-3 bg-red-400 rounded-full"></div>
                            <div className="w-3 h-3 bg-yellow-400 rounded-full"></div>
                            <div className="w-3 h-3 bg-green-400 rounded-full"></div>
                          </div>
                          <div className="flex-1 text-center text-sm text-gray-600 font-mono">
                            beautiful-landing-page.html
                          </div>
                        </div>
                        <iframe
                          title="Live Preview"
                          className="w-full h-full border-none"
                          srcDoc={`<style>${generated.css}</style>${generated.html}`}
                        />
                      </div>
                    ) : (
                      <div className="h-full flex items-center justify-center bg-white/5 backdrop-blur rounded-2xl border border-white/10 border-dashed">
                        <div className="text-center text-gray-400">
                          <Eye className="w-16 h-16 mx-auto mb-4 opacity-50" />
                          <p className="text-lg">
                            Your live preview will appear here
                          </p>
                          <p className="text-sm opacity-75">
                            Start by describing your landing page
                          </p>
                        </div>
                      </div>
                    )
                  ) : generated ? (
                    <div className="h-full bg-black/30 backdrop-blur rounded-2xl border border-white/10 overflow-hidden">
                      <div className="flex bg-black/20 border-b border-white/10">
                        <div className="px-4 py-3 text-sm text-gray-300 bg-white/5 font-medium">
                          HTML/CSS
                        </div>
                      </div>
                      <pre className="p-6 text-sm text-gray-300 overflow-auto h-full font-mono leading-relaxed">
                        <code>{`<style>\n${generated.css}\n</style>\n\n${generated.html}`}</code>
                      </pre>
                    </div>
                  ) : (
                    <div className="h-full flex items-center justify-center bg-black/20 backdrop-blur rounded-2xl border border-white/10 border-dashed">
                      <div className="text-center text-gray-400">
                        <Code className="w-16 h-16 mx-auto mb-4 opacity-50" />
                        <p className="text-lg">
                          Your generated code will appear here
                        </p>
                        <p className="text-sm opacity-75">
                          Start by describing your landing page
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Mobile Layout */}
        <div className="lg:hidden">
          <div className="bg-white/10 backdrop-blur-xl rounded-2xl shadow-2xl border border-white/20 overflow-hidden">
            {/* Mobile Header */}
            <div className="flex items-center justify-between p-4 border-b border-white/10">
              <div className="flex items-center gap-2">
                <div className="p-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl">
                  <Zap className="w-4 h-4 text-white" />
                </div>
                <h2 className="text-lg font-bold text-white">AI Assistant</h2>
              </div>
              <button
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                className="p-2 bg-white/10 backdrop-blur border border-white/20 rounded-xl text-white hover:bg-white/20 transition-all duration-300"
              >
                {mobileMenuOpen ? (
                  <X className="w-5 h-5" />
                ) : (
                  <Menu className="w-5 h-5" />
                )}
              </button>
            </div>

            {/* Mobile Menu */}
            {mobileMenuOpen && (
              <div className="bg-white/5 backdrop-blur border-b border-white/10 p-4">
                <div className="flex gap-2 mb-4">
                  <button
                    onClick={() => {
                      setActiveView("preview");
                      setMobileMenuOpen(false);
                    }}
                    className={`flex-1 flex items-center justify-center gap-2 px-4 py-3 rounded-xl font-medium transition-all duration-300 ${
                      activeView === "preview"
                        ? "bg-gradient-to-r from-green-500 to-cyan-500 text-white shadow-lg"
                        : "bg-white/10 text-gray-300"
                    }`}
                  >
                    <Eye className="w-4 h-4" />
                    Preview
                  </button>
                  <button
                    onClick={() => {
                      setActiveView("code");
                      setMobileMenuOpen(false);
                    }}
                    className={`flex-1 flex items-center justify-center gap-2 px-4 py-3 rounded-xl font-medium transition-all duration-300 ${
                      activeView === "code"
                        ? "bg-gradient-to-r from-cyan-500 to-purple-500 text-white shadow-lg"
                        : "bg-white/10 text-gray-300"
                    }`}
                  >
                    <Code className="w-4 h-4" />
                    Code
                  </button>
                </div>
                {generated && (
                  <button
                    onClick={handleDownload}
                    className="w-full flex items-center justify-center gap-2 bg-white/10 hover:bg-white/20 backdrop-blur border border-white/20 text-white px-4 py-3 rounded-xl transition-all duration-300"
                  >
                    <Download className="w-4 h-4" />
                    Download HTML
                  </button>
                )}
              </div>
            )}

            {/* Chat Section */}
            <div className="p-4 space-y-4 max-h-96 overflow-y-auto">
              {messages.map((msg, i) => (
                <div
                  key={i}
                  className={`flex ${
                    msg.sender === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  <div
                    className={`max-w-[85%] px-4 py-3 rounded-2xl shadow-lg ${
                      msg.sender === "user"
                        ? "bg-gradient-to-r from-purple-500 to-pink-500 text-white"
                        : msg.isTyping
                        ? "bg-white/10 backdrop-blur text-gray-300 animate-pulse"
                        : "bg-white/10 backdrop-blur text-gray-100 border border-white/20"
                    }`}
                  >
                    {msg.isTyping ? (
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div
                          className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.1s" }}
                        ></div>
                        <div
                          className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.2s" }}
                        ></div>
                      </div>
                    ) : (
                      <div className="text-sm">{msg.text}</div>
                    )}
                  </div>
                </div>
              ))}
              <div ref={chatEndRef} />
            </div>

            {/* Mobile Input */}
            <div className="p-4 border-t border-white/10">
              <div className="flex gap-2">
                <input
                  className="flex-1 bg-white/10 backdrop-blur border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 text-sm"
                  type="text"
                  placeholder="Describe your landing page..."
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyDown={(e) => e.key === "Enter" && handleSend()}
                  disabled={loading}
                />
                <button
                  className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white p-3 rounded-xl shadow-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                  onClick={handleSend}
                  disabled={loading || !input.trim()}
                >
                  {loading ? (
                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  ) : (
                    <Send className="w-5 h-5" />
                  )}
                </button>
              </div>
            </div>

            {/* Mobile Preview/Code Area */}
            <div className="p-4 pt-0">
              {activeView === "preview" ? (
                generated ? (
                  <div className="h-96 bg-white rounded-xl shadow-2xl border border-white/20 overflow-hidden">
                    <div className="flex items-center gap-2 bg-gray-100 px-3 py-2 border-b">
                      <div className="flex gap-1">
                        <div className="w-2 h-2 bg-red-400 rounded-full"></div>
                        <div className="w-2 h-2 bg-yellow-400 rounded-full"></div>
                        <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                      </div>
                      <div className="flex-1 text-center text-xs text-gray-600 font-mono">
                        preview
                      </div>
                    </div>
                    <iframe
                      title="Live Preview"
                      className="w-full h-full border-none"
                      srcDoc={`<style>${generated.css}</style>${generated.html}`}
                    />
                  </div>
                ) : (
                  <div className="h-96 flex items-center justify-center bg-white/5 backdrop-blur rounded-xl border border-white/10 border-dashed">
                    <div className="text-center text-gray-400">
                      <Eye className="w-12 h-12 mx-auto mb-3 opacity-50" />
                      <p className="text-sm">Your preview will appear here</p>
                    </div>
                  </div>
                )
              ) : generated ? (
                <div className="h-96 bg-black/30 backdrop-blur rounded-xl border border-white/10 overflow-hidden">
                  <div className="flex bg-black/20 border-b border-white/10">
                    <div className="px-3 py-2 text-xs text-gray-300 bg-white/5 font-medium">
                      HTML/CSS
                    </div>
                  </div>
                  <pre className="p-4 text-xs text-gray-300 overflow-auto h-full font-mono leading-relaxed">
                    <code>{`<style>\n${generated.css}\n</style>\n\n${generated.html}`}</code>
                  </pre>
                </div>
              ) : (
                <div className="h-96 flex items-center justify-center bg-black/20 backdrop-blur rounded-xl border border-white/10 border-dashed">
                  <div className="text-center text-gray-400">
                    <Code className="w-12 h-12 mx-auto mb-3 opacity-50" />
                    <p className="text-sm">Your code will appear here</p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
